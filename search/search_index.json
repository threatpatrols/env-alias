{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Env Alias","text":"<p>Env Alias is an environment variable swiss-army-knife that enables loading complex collections  of environment variables from a variety of sources only when you require them, thus reducing risks  in working with sensitive environment values.</p> <p>A variety of data-formats are supported including JSON, YAML, Keepass, Ansible Vault,  Plaintext and Ini-config where these formats can be sourced from the local-filesystem,  http-remote or generated through shell-command exec output.</p> <p>For example setting an Ansible-vault password file and loading AWS access credentials from values stored  in a git project based Keepass file:  <pre><code>env-alias:\n\n  MYPROJECT_KEEPASS_FILE:\n    name: null  # prevents this value being assigned into env\n    exec: 'echo \"$(git rev-parse --show-toplevel)/secrets/myproject-keepass.kdbx\"'\n\n  MYPROJECT_KEEPASS_PASSPHRASE:\n    source: \"&lt;getpass&gt;\"  # obtain value from user-input using getpass method\n    override: false  # if this env-value exists then skip setting again\n\n  MYPROJECT_ANSIBLE_VAULT_PASSWORD:\n    name: null  # prevents this value being assigned into env\n    source: \"env:MYPROJECT_KEEPASS_FILE\"\n    selector: \"myproject-name/ansible-vault-entry-name:Password\"  # select an item from Keepass file\n    keepass_password: \"env:MYPROJECT_KEEPASS_PASSPHRASE\"\n\n  ANSIBLE_VAULT_PASSWORD_FILE:\n    ansible_vault_password: \"env:MYPROJECT_ANSIBLE_VAULT_PASSWORD\"  # NB: see docs how this gets managed\n    ansible_vault_password_file: true  # invoke special helper that renders an Ansible Vault password file\n\n  AWS_SECRET_ACCESS_KEY:\n    source: \"env:MYPROJECT_KEEPASS_FILE\"\n    selector: \"myproject-name/aws-entry-name:Password\"\n    keepass_password: \"env:MYPROJECT_KEEPASS_PASSPHRASE\"\n\n  AWS_ACCESS_KEY_ID:\n    source: \"env:MYPROJECT_KEEPASS_FILE\"\n    selector: \"myproject-name/aws-entry-name:Username\"\n    keepass_password: \"env:MYPROJECT_KEEPASS_PASSPHRASE\"\n</code></pre></p> <p>The above example sets the environment variable <code>MYPROJECT_KEEPASS_PASSPHRASE</code> with user input using  the <code>getpass</code> Python module only if not already set (<code>override=false</code>).  This environment value is then  used as the <code>keepass</code> passphrase to open a Keepass file where values are then selected and exported  into the shell environment.</p> <p>Substantially more complex env-alias definitions can be created.</p> <p>By naming your env-aliases with an easy to remember prefix such as <code>env-</code> it is also possible to  leverage shell tab-completion thus making it easier to find the env-alias definitions created  for your project or other use-case situation.</p>"},{"location":"#features","title":"Features","text":"<p>Env Alias is enormously useful in working with large sets of environment variables from remote, encrypted  or otherwise secured data-sources.</p> <ul> <li>Data sources: local-files, http-remote and stdout from an exec command-line.</li> <li>Source formats supported: JSON, YAML, Keepass, Ansible Vault, Plaintext and Ini-config.</li> <li>Select values using jq style selectors, xpath style selectors or line-numbers.</li> <li>\ud83d\udca5 Additional special handling for Ansible Vault Password Files that makes credential handling for Ansible Vault files substantially easier with reduced exposure risks. \ud83d\udca5     </li> <li>Self reference environment values in the definition file or from the existing system environment.</li> <li>Define variables with a <code>null</code> name to prevent them being exported into the system environment while still being available for self-reference within the env-alias definition; this is helpful when working with sensitive values that should not be available through the system environment.</li> <li>Ability to use <code>exec</code> commands to setup other project prerequisites or other project start conditions.</li> <li>Debug mode output to STDERR.</li> <li>Easy installation from PyPI.</li> <li>Plenty of documentation and examples - https://threatpatrols.github.io/env-alias</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Pip or pipx should be fine, we prefer pipx these days. <pre><code>pipx install env-alias\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>This tool is typically invoked using an entry in <code>.bash_aliases</code> with an entry of the form:- <pre><code>source &lt;(env-alias ~/projects/awesome/env-awesome-vars.yml)\n</code></pre></p> <p>This simple <code>.bash_aliases</code> one-line entry creates the alias <code>env-awesome-project</code> by inferring the  alias-name from the filename, where this alias then invokes env-alias to set environment values  defined in <code>env-awesome-project.yml</code> </p> <p>Alternatively, you might want to create the alias <code>awesome-envvars</code> which you could do as per -  <pre><code>source &lt;(env-alias awesome-envvars ~/projects/awesome/env-awesome-vars.yml)\n</code></pre></p>"},{"location":"#project","title":"Project","text":"<ul> <li>Docs - threatpatrols.github.io/env-alias</li> <li>PyPI - pypi.python.org/pypi/env-alias</li> <li>Github - github.com/threatpatrols/env-alias</li> </ul> <p>This project was migrated from <code>github.com/ndejong/env-alias</code> to <code>github.com/threatpatrols/env-alias</code> in March 2025.</p>"},{"location":"development/","title":"Development","text":"<p>This project uses the very awesome slap-cli utility to help with  development, testing, packaging and release management.  Plays nice with the fancy new UV tooling too. </p>"},{"location":"development/#slap-cli","title":"slap-cli","text":"<pre><code># Create a new venv \"env-alias\" to work within\nslap venv -cg env-alias\n\n# Activate the \"env-alias\" venv\nslap venv -ag env-alias\n\n# Install the requirements for the \"env-alias\" development venv\nslap install --upgrade --link\n\n# Update code formatting\nslap run format\n\n# Test the package (pytest, uv)\nslap test\n\n# Write a \"feature\" changelog entry\nslap changelog add -t \"feature\" -d \"&lt;changelog message&gt;\" [--issue &lt;issue_url&gt;]\n\n# Bump the package version at the \"patch\" semver level\nslap release patch --dry\nslap release patch --tag [--push]\n\n# Build a package\nslap publish --build-directory build --dry\n\n# Publish a package\nslap publish\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#bsd-2-clause","title":"BSD 2 Clause","text":"<pre><code>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"license/#copyright","title":"Copyright","text":"<ul> <li>Copyright \u00a9 2020 Nicholas de Jong</li> <li>Copyright \u00a9 2025 Threat Patrols Pty Ltd</li> </ul> <p>All rights reserved.</p>"},{"location":"project/","title":"Project","text":""},{"location":"project/#project_1","title":"Project","text":"<ul> <li>Docs - threatpatrols.github.io/env-alias</li> <li>PyPI - pypi.python.org/pypi/env-alias</li> <li>Github - github.com/threatpatrols/env-alias</li> </ul> <p>This project was migrated from <code>github.com/ndejong/env-alias</code> to <code>github.com/threatpatrols/env-alias</code> in March 2025.</p>"},{"location":"project/#features-bugs","title":"Features / Bugs","text":"<p>Please submit all feature-requests and bug-reports via Github issues</p> <ul> <li>https://github.com/threatpatrols/env-alias/issues</li> </ul>"},{"location":"project/#contact","title":"Contact","text":"<ul> <li>Threat Patrols Pty Ltd</li> <li>www.threatpatrols.com</li> </ul>"},{"location":"definition-attributes/ansible-vault-password-file/","title":"ansible_vault_password_file","text":"<p>The <code>ansible_vault_password_file</code> definition-attribute is a special attribute that causes a standard Ansible Vault  password-file to be generated as per docs.ansible.com documentation.</p> <p>When this is used to set Ansible variable <code>ANSIBLE_VAULT_PASSWORD_FILE</code> you gain the ability to easily invoke ansible-vault without further Ansible configuration or other Ansible environment settings.</p>"},{"location":"definition-attributes/ansible-vault-password-file/#details","title":"Details","text":"<p>Of note is that the ansible-password-file rendering uses random file names and hash-of-source-name to create consistent  but difficult to guess environment names making it harder to target specific environment values. </p> <pre><code>$ env | grep ANSIBLE_VAULT_PASSWORD_FILE\nANSIBLE_VAULT_PASSWORD_FILE=/tmp/igxrsfnrsxig\n\n$ cat /tmp/igxrsfnrsxig\n#!/bin/sh\necho \"${E25AF8C1096A}\"\n\n$ env | grep E25AF8C1096A \nE25AF8C1096A=zPrT1z8yYTBV5q5l7jahGoQf79fcu9qtD4ERM3wB\n</code></pre> <p>In the above example -</p> <ul> <li>The env-var <code>ANSIBLE_VAULT_PASSWORD_FILE</code> points to a random filename <code>/tmp/igxrsfnrsxig</code> located in the system temp path</li> <li>The Ansible password-file is a standard format executable that echos out another environment value as per Ansible documentation</li> <li>The environment name <code>E25AF8C1096A</code> gets generated based on a salted SHA256 of the source attribute name (not the value itself)</li> <li>Finally, the value for the vault-password is exposed on the environment variable <code>E25AF8C1096A</code> </li> </ul> <p>The above is achieved using an env-alias definition as simple as - <pre><code>  ANSIBLE_VAULT_PASSWORD_FILE:\n    ansible_vault_password: \"some-secret-value\"\n    ansible_vault_password_file: true\n</code></pre></p> <p>Warning</p> <p>Typically, the <code>ansible_vault_password</code> value should never be set using an in-the-clear value as shown above, you  should use prior steps to obtain this value safely/securely such as from user-input using <code>&lt;getpass&gt;</code> or load  from a Keepass file or other appropriate mechanism.</p>"},{"location":"definition-attributes/ansible-vault-password/","title":"ansible_vault_password","text":"<p>The <code>ansible_vault_password</code> definition-attribute is used to define a password used to open an Ansible Vault file.</p> <p>This value can be used in two contexts -</p> <ol> <li>Can be used as an ansible-vault-file <code>source</code> to then select an item for a regular env-alias     definition - see the Regular usage below.</li> <li>Can be used with the <code>ansible_vault_password_file</code> attribute that invokes a special helper for generating Ansible     Vault password-files; this is super-helpful when working with Ansible, see the Special helper usage below.</li> </ol>"},{"location":"definition-attributes/ansible-vault-password/#regular-usage","title":"Regular usage","text":"<p><pre><code>env-alias:\n\n    EXAMPLE_ANSIBLE_VAULT_PASSWORD:\n        name: null\n        source: \"&lt;getpass&gt;\"\n        override: false  # if this env-value exists then skip setting again\n\n    EXAMPLE_VALUE:\n        source: \"~/My Files/ansible-vault-datafile.vault\"\n        selector: \"all/vars/vault/my_example_value\"\n        ansible_vault_password: \"env:EXAMPLE_ANSIBLE_VAULT_PASSWORD\"\n</code></pre> The example above -</p> <ul> <li>the ansible-password variable input is taken from user input using Python getpass.</li> <li>the user-input is not exported into the system environment (<code>name: null</code>) and only exists internally within env-alias. </li> <li>the user-input is skipped if the env-value is already set.</li> <li>the environment value <code>EXAMPLE_VALUE</code> is set using an item located at <code>all/vars/vault/my_example_value</code> within the    ansible-vault file <code>ansible-vault-datafile.vault</code>. </li> </ul>"},{"location":"definition-attributes/ansible-vault-password/#special-helper-usage","title":"Special helper usage","text":"<p>The special Ansible helper is invoked by setting <code>ansible_vault_password_file</code> to true. </p> <p>This special helper makes working with Ansible Vault files considerably easier and tidier by self generating the  required (executable) Ansible Vault Password File.</p> <p>The helper also generates \"hard-to-guess\" filenames and environment values that are derived from multiple sha256  rounds of the password with salt added. See the docs for more  details on this mechanism.</p> <pre><code>env-alias:\n\n    EXAMPLE_ANSIBLE_VAULT_PASSWORD:\n        name: null\n        source: \"&lt;getpass&gt;\"\n\n    ANSIBLE_VAULT_PASSWORD_FILE:\n        ansible_vault_password: \"env:EXAMPLE_ANSIBLE_VAULT_PASSWORD\"\n        ansible_vault_password_file: true\n</code></pre> <p>The example above -</p> <ul> <li>the ansible-password variable input is taken from user input using Python <code>getpass</code>.</li> <li>the user-input is not exported into the system environment (<code>name: null</code>) and only exists internally within env-alias. </li> <li>the environment variable <code>ANSIBLE_VAULT_PASSWORD_FILE</code> is set to a value that points to a generated executable file   that uses random file-names and hard-to-guess variable-names.</li> </ul> <p>This arrangement then allows the user to interact with <code>ansible-vault</code> without any further configuration or effort to  manage the credential.  You may additionally choose to store the Ansible Vault password in a Keepass database that can  be easily chained together here.</p>"},{"location":"definition-attributes/exec/","title":"exec","text":"<p>The <code>exec</code> definition-attribute can be used to obtain values from STDOUT when executing a shell command.   All the  usual parsers and selectors are available as they are with other source types.</p> <p>Warning</p> <p>It should be obvious, however, shell execution hazards and their appropriate precautions apply with this functionality.</p>"},{"location":"definition-attributes/exec/#example-curl","title":"Example - curl","text":"<p>For example using <code>exec</code> it is possible to set external values by calling curl</p> <pre><code>env-alias:\n    EXAMPLE:\n        exec: \"curl -s https://ip-ranges.amazonaws.com/ip-ranges.json\"\n        parser: \"json\"\n        selector: \".prefixes[1].ip_prefix\"\n</code></pre> <p>This example is somewhat redundant because env-alias will perform a http-get request for any source definition that looks like a URL anyway.</p>"},{"location":"definition-attributes/exec/#example-mkdir","title":"Example - mkdir","text":"<p>This functionality can be useful in other ways too, such as making sure resources exist before loading an  environment, for example create a path and skip setting the env variable.</p> <pre><code>env-alias:\n    EXAMPLE:\n        name: null\n        exec: \"mkdir -p ~/.terraform.d/plugin-cache\"\n</code></pre>"},{"location":"definition-attributes/exec/#example-random-string","title":"Example - random string","text":"<p>Another example that invokes a shell-command to generate a 20 character random value, by default the  source-type is <code>text</code> and the selector will take the first line so no further definition is required here. </p> <pre><code>env-alias:\n    EXAMPLE:\n        exec: \"head /dev/urandom | base64 - -w0 | tr -d \"=/+\" | head -c20\"\n</code></pre> <p>If we expand this into long-form with its parser and selector, we'd get the same thing. <pre><code>env-alias:\n    EXAMPLE:\n        exec: \"head /dev/urandom | base64 - -w0 | tr -d \"=/+\" | head -c20\"\n        parser: \"text\"\n        selector: 1\n</code></pre></p>"},{"location":"definition-attributes/exec/#example-host-ip-addr","title":"Example - host ip addr","text":"<p>Another example to obtain the first ip-address on the first interface of the host  </p> <pre><code>env-alias:\n    EXAMPLE:\n        exec: \"ip -json addr | jq -r .[1].addr_info[0].local\"\n</code></pre>"},{"location":"definition-attributes/keepass-password/","title":"keepass_password","text":"<p>The <code>keepass_password</code> definition-attribute is used to send a password through keepass-cli when opening a Keepass file that hence makes it possible select values inside Keepass files. </p>"},{"location":"definition-attributes/keepass-password/#example-keepass","title":"Example - keepass","text":"<pre><code>env-alias:\n\n  MYPROJECT_KEEPASS_PASSPHRASE:\n    source: \"&lt;getpass&gt;\"  # obtain value from user-input using getpass method\n    override: false  # if this env-value exists then skip setting again\n\n  MYPROJECT_KEEPASS_FILE:\n    name: null  # prevent this value being assigned into env with this name\n    exec: 'echo \"$(git rev-parse --show-toplevel)/secrets/myproject-keepass.kdbx\"'\n\n  MYPROJECT_SECRET_VALUE:\n    source: \"env:MYPROJECT_KEEPASS_FILE\"\n    selector: \"keepass-folder-name/keepass-entry-name:Password\"\n    keepass_password: \"env:MYPROJECT_KEEPASS_PASSPHRASE\"\n</code></pre> <p>The example above demonstrates how it is possible to collect a keepass password into an environment variable with user-input and use this to open and access contents within a Keepass file.</p> <p>NB: case-sensitive \"Password\" expression in the selector expression, similarly, \"Username\" is case-sensitive too.</p>"},{"location":"definition-attributes/keepass-password/#under-the-hood","title":"Under the hood","text":"<p>Under the hood env-alias wraps a command line to exec a keepass-cli command as shown -</p> <pre><code>random_envvar = \"\".join(random.choice(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") for i in range(16))\nos.environ[random_envvar] = password\n\ncommand_line = (\n    f' printf \"${\"{\" + random_envvar + \"}\"}\" | \"{keepassxc_cli}\" show '\n    f'--quiet --show-protected --attributes \"{keepass_attribute}\" \"{str(filename)}\" \"{keepass_path}\"'\n)\n\nexecute_content = EnvAliasSource.execute(command_line)\nos.unsetenv(random_envvar)\n</code></pre>"},{"location":"definition-attributes/name/","title":"name","text":"<p>The <code>name</code> definition-attribute is used to name (or rename) the environment variable name that is otherwise  taken from the env-alias definition key name.</p> <p>More importantly, the <code>name</code> attribute can be set to <code>null</code> in which case the variable will be treated as an  internal runtime only variable that does not get exposed into the environment; this is useful when passing  secrets in-between definitions.</p>"},{"location":"definition-attributes/name/#example-simple","title":"Example - simple","text":"<pre><code>env-alias:\n    DEFINITION_01:\n        name: \"MYPROJECT_ENV_VAR_01\"\n        value: \"hello world a\"\n\n    DEFINITION_02:\n        name: \"MYPROJECT_ENV_VAR_02\"\n        value: \"Hello World B\"\n</code></pre>"},{"location":"definition-attributes/name/#example-hidden-variable","title":"Example - hidden variable","text":"<p>The example below demonstrates using a <code>null</code> name for <code>MYPROJECT_HIDDEN_ENV_VAR</code> that does not get assigned into the environment but can still be referenced in the subsequent <code>MYPROJECT_ENV_VAR</code> definition.</p> <pre><code>env-alias:\n    MYPROJECT_HIDDEN_ENV_VAR:\n        name: null\n        exec: \"date +%s.%N\"\n\n    MYPROJECT_ENV_VAR:\n        value: \"env:MYPROJECT_HIDDEN_ENV_VAR\"\n</code></pre>"},{"location":"definition-attributes/override/","title":"override","text":"<p>The <code>override</code> definition-attribute is used to skip setting an environment variable if an environment value  already exists.</p> <p>This is helpful when you only want to obtain user input once per terminal session.</p>"},{"location":"definition-attributes/override/#example-override","title":"Example - override","text":"<pre><code>env-alias:\n\n  MYPROJECT_USER_PASSWORD:\n    source: \"&lt;getpass&gt;\"   # obtain value from user-input using getpass method\n    override: false       # if this env-value exists then skip setting again\n\n  MYPROJECT_USER_INPUT:\n    source: \"&lt;stdin&gt;\"     # obtain value from user-input\n    override: false       # if this env-value exists then skip setting again\n</code></pre>"},{"location":"definition-attributes/overview/","title":"Overview","text":"<p>Env Alias definition files are YAML format files that define how the value for each environment variable is generated.</p> <ul> <li>All Env Alias definition files MUST have an <code>env-alias</code> top-level root.</li> <li>Environment variable names are defined by their key name, or their <code>name</code> attribute.</li> <li>Each environment-variable definition uses attributes that define how their values are    generated or obtained.</li> </ul> <p>Conceptually, values for the environment variables are generated in three steps -</p> <ol> <li>Content from source: this can be from the local-filesystem, exec-command, remote-http, in-line etc.</li> <li>Parse the source content: serializing the content from its respective format YAML, JSON, INI, TEXT etc.</li> <li>Select the item from the parsed content: using a <code>jq</code> style selector (or xpath selector) select the value required. </li> </ol> <p>Modifiers and special cases (e.g. Ansible Password Files) are possible, however the above 1,2,3 steps are usual.</p> <p>The following definition attributes are available -</p> <ul> <li> <p>source - defines a source of content to be sent to the parser.  The <code>source</code> attribute supports    some special values including <code>&lt;getpass&gt;</code> that invokes the Python getpass module, regular <code>&lt;stdin&gt;</code> that does what    you'd expect from STDIN, the prefix <code>env:</code> can be used to import the source definition from another environment    variable.  Source values beginning with <code>http</code> are treated as remote-http that invoke a GET request to retrieve.</p> </li> <li> <p>parser - the parser (or deserializer) is automatically estimated based on source filename    extensions or the <code>Content-Type</code> header (if http-remote) and defaults to TEXT if nothing is determined.  This    behaviour is easily overridden by defining <code>ini</code>, <code>yaml</code>, or <code>json</code> as the parser; additionally, a <code>none</code> parser is   available that does a raw pass-through without any parsing.</p> </li> <li> <p>selector - the selector provides the ability to \"select\" a value from the parsed content.  Selectors    support basic forms of dot-notation (eg: <code>foo.0.bar</code>), brace-notation (eg: <code>foo[0]bar</code>) and slash-notation (eg:    <code>foo/0/bar</code>).  Text files support line-number selectors for the full line only.  Defining the selector as <code>null</code>    prevents the environment variable from being exported into the system environment that is similar to setting    the <code>name</code> as null.</p> </li> <li> <p>name - override the definition key-name and use this name instead; defining the name as <code>null</code> (without    quotes) causes the variable to become internal-only within the definition file and will not be exported into the    system environment.</p> </li> <li> <p>value - directly set the value in-line; values prefixed with <code>env:</code> can be used to import values from    another environment variable. </p> </li> <li> <p>exec - defines a command-line to exec where the STDOUT is returned as the source content; any nonzero    exit-code will raise an exception that will exit with an error from the command-line STDERR output. </p> </li> <li> <p>override - a true/false attribute that defines if Env Alias will override any existing environment    value; by default set to <code>True</code>.</p> </li> <li> <p>keepass_password - used to define a password to open a Keepass database <code>.kdbx</code> file as    a <code>source</code> definition; Additionally, a <code>selector</code> in the form <code>group/subgroup/entryname:Password</code> is required to    obtain the desired Keepass value.</p> </li> <li> <p>ansible_vault_password - used to define a password to open an Ansible Vault    file; this attribute can be used either to open and select values from an Ansible Vault -or- invoke the special    ansible-vault-password-file helper.</p> </li> <li> <p>ansible_vault_password_file - a true/false attribute that is used together    with the <code>ansible_vault_password</code> attribute to automatically create an Ansible Vault Password File (executable    file style) setups; \ud83d\udca5 this super helpful and a favorite feature! \ud83d\udca5</p> </li> </ul>"},{"location":"definition-attributes/parser/","title":"parser","text":"<p>The parser defines the deserializer used to parse the source-content.</p> <p>If the parser is not explicitly defined, EnvAlias will estimate what to use based on filename extension or the http-remote <code>Content-Type</code> response header.</p> <p>All other source-content is treated as plain text.</p>"},{"location":"definition-attributes/parser/#example-ini","title":"Example - ini","text":"<p>Parse the <code>aws_access_key_id</code> from a standard AWS credentials file. <pre><code>env-alias:\n  AWS_ACCESS_KEY_ID:\n    source: \"~/.aws/credentials\"\n    parser: ini\n    selector: \"default.aws_access_key_id\"\n</code></pre></p>"},{"location":"definition-attributes/parser/#example-yaml","title":"Example - yaml","text":"<p>Parse a value from <code>/foo/bar/data</code> in the file <code>/tmp/foobar.data</code> using an explict <code>yaml</code> parser because the filename extension does not indicate a <code>.yaml</code> file. <pre><code>env-alias:\n  EXAMPLE:\n    source: \"/tmp/foobar.data\"\n    parser: yaml\n    selector: \"/foo/bar/data\"\n</code></pre></p>"},{"location":"definition-attributes/parser/#example-json","title":"Example - json","text":"<p>Parse a value from <code>/foo/bar/data</code> in the file <code>/tmp/foobar.json</code> using an inferred <code>JSON</code> parser because the filename infers the json file type.  <pre><code>env-alias:\n  EXAMPLE:\n    source: \"/tmp/foobar.json\"\n    selector: \"/foo/bar/data\"\n</code></pre></p>"},{"location":"definition-attributes/parser/#example-text","title":"Example - text","text":"<p>Read the source as text even though the filename indicates <code>.json</code> content type. <pre><code>env-alias:\n  EXAMPLE:\n    source: \"/tmp/foobar.json\"\n    parser: text\n    selector: 1\n</code></pre></p>"},{"location":"definition-attributes/selector/","title":"selector","text":"<p>Selectors make it possible to \"pick\" a value from the parsed content.  </p> <p>Structured content formats (ini, yaml, json) support selectors using -  - slash-notation (eg: <code>/foo/bar</code>)  - dot-notation (eg: <code>foo.0.bar</code>)  - brace-notation (eg: <code>foo[0]bar</code>)</p> <p>Text files support line-number selectors only; by default selector value is one (<code>1</code>) for text content type, thus if omitted the first line only will be selected.</p> <p>NB: previous versions of env-alias supported a none/null selector that worked in teh same way as a none/null name, this has been dropped in favour of a name-is-null only mechanism for such functionality. </p>"},{"location":"definition-attributes/selector/#example-dot-notation","title":"Example - dot-notation","text":"<p>Make a selection from a structured data source using dot-notation</p> <pre><code>env-alias:\n    EXAMPLE:\n        source: \"https://ip-ranges.amazonaws.com/ip-ranges.json\"\n        selector: \".prefixes[1].ip_prefix\"\n</code></pre>"},{"location":"definition-attributes/selector/#example-slash-notation","title":"Example - slash-notation","text":"<p>Make a selection from a structured data source using slash-notation</p> <pre><code>env-alias:\n    EXAMPLE:\n        source: \"https://ip-ranges.amazonaws.com/ip-ranges.json\"\n        selector: \"/prefixes[1]/ip_prefix\"\n</code></pre>"},{"location":"definition-attributes/selector/#example-line-number","title":"Example - line-number","text":"<p>Make a selection from a flat text file by line number only</p> <pre><code>env-alias:\n    EXAMPLE:\n        source: \"/proc/cpuinfo\"\n        selector: 5\n</code></pre>"},{"location":"definition-attributes/source/","title":"source","text":"<p>All Env Alias definitions should have a <code>source</code>, <code>exec</code> or <code>value</code> that sets the source content that  is subsequently passed to a parser.</p> <p>Four types of sources are available -</p> <ul> <li>source (local) - any local file.</li> <li>source (remote) - any http-remote object available via a GET request. </li> <li>exec (stdout) - the STDOUT content from a shell-exec command.</li> <li>value (direct setting) - direct assignment of the value.</li> </ul> <p>It is possible to reference other environment-variables within a definition by using its name prefixed with  an <code>env:</code> string.</p>"},{"location":"definition-attributes/source/#example-simple","title":"Example - simple","text":"<p>Source content from line 5 in source file <code>/proc/cpuinfo</code> and assign to env-variable <code>EXAMPLE</code> <pre><code>env-alias:\n  EXAMPLE:\n    source: \"/proc/cpuinfo\"\n    selector: 5\n</code></pre></p>"},{"location":"definition-attributes/source/#example-getpass","title":"Example - getpass","text":"<p>Source content from the user using Python getpass that is part  of the Python standard libraries.  The Python getpass module ensures input is not echoed to terminal <pre><code>env-alias:\n  EXAMPLE:\n    source: \"&lt;getpass&gt;\"\n</code></pre></p>"},{"location":"definition-attributes/source/#example-stdin","title":"Example - stdin","text":"<p>Source content from STDIN, that will be observable in the terminal output. <pre><code>env-alias:\n  EXAMPLE:\n    source: \"&lt;stdin&gt;\"\n</code></pre></p>"},{"location":"definition-attributes/source/#example-home-path","title":"Example - home path","text":"<p>Source content from a file in the user home-path using tilde (<code>~</code>) notation. <pre><code>env-alias:\n  AWS_ACCESS_KEY_ID:\n    source: \"~/.aws/credentials\"\n    parser: ini\n    selector: \"profile_name.aws_access_key_id\"\n</code></pre></p>"},{"location":"definition-attributes/source/#example-http-remote","title":"Example - http remote","text":"<p>Source content from a remote HTTP source <pre><code>env-alias:\n  EXAMPLE:\n    source: \"https://ip-ranges.amazonaws.com/ip-ranges.json\"\n    selector: \"prefixes.2.ip_prefix\"\n</code></pre></p>"},{"location":"definition-attributes/source/#example-env-reference","title":"Example - env reference","text":"<p>Source location set by the value of another environment variable <code>EXAMPLE_SOURCE</code>.  <pre><code>env-alias:\n  EXAMPLE_SOURCE:\n    value: \"/proc/cpuinfo\"\n  EXAMPLE:\n    source: \"env:EXAMPLE_SOURCE\"\n    selector: 5\n</code></pre></p>"},{"location":"definition-attributes/value-to/","title":"value_to","text":"<p>The <code>value_to</code> definition-attribute makes it possible to send the generated <code>value</code> to either STDOUT or STDERR.</p> <p>This can be helpful in circumstances when a quick debug reveal is required or you need to provide some kind of  user response.</p>"},{"location":"definition-attributes/value-to/#example-to-stderr","title":"Example - to STDERR","text":"<pre><code>env-alias:\n\n  EXAMPLE_STDERR:\n    name: null\n    value: \"This is a message that will get sent to STDERR\"\n    value_to: \"&lt;STDERR&gt;\"\n</code></pre>"},{"location":"definition-attributes/value-to/#example-to-stdout","title":"Example - to STDOUT","text":"<pre><code>env-alias:\n\n  EXAMPLE_STDOUT_CONTENT:\n    name: null\n    exec: \"date\"\n\n  EXAMPLE_STDOUT:\n    name: null\n    exec: 'echo \"The date is ${EXAMPLE_STDOUT_CONTENT} - boom!\"'\n    value_to: \"&lt;STDOUT&gt;\"\n</code></pre>"},{"location":"definition-attributes/value/","title":"value","text":"<p>The <code>value</code> definition-attribute makes it possible to directly assign a value to an environment variable, it is  the most straight forward use case.</p> <p>Additionally, it is possible to reference other environment variables via the <code>env:</code> prefix as shown.  This can  be helpful when the value needs to be dynamic and used in subsequent definition steps.</p>"},{"location":"definition-attributes/value/#example-simple-direct","title":"Example - simple direct","text":"<pre><code>env-alias:\n\n  MYPROJECT_ENVVAR:\n    value: 'hello world'\n</code></pre>"},{"location":"definition-attributes/value/#example-by-reference","title":"Example - by reference","text":"<pre><code>env-alias:\n\n  MYPROJECT_ENVVAR:\n    value: 'hello world'\n\n  MYPROJECT_REFERENCED_ENVVAR:\n    value: 'env:MYPROJECT_ENVVAR'\n</code></pre>"},{"location":"examples/ansible-project/","title":"Ansible Project","text":""},{"location":"examples/ansible-project/#example","title":"Example","text":"<p>An example env-alias definition file for an Ansible project, this example does a few neat things -</p> <ul> <li>Sets up the <code>ANSIBLE_VAULT_PASSWORD_FILE</code> without any additional setup</li> <li>Sets the <code>ANSIBLE_SSH_PIPELINING</code> to reduce latency between Ansible calls, thus speeding things up.</li> <li>Creates a throw-away SSH keypair that can be used to bootstrap a target instance </li> </ul> <pre><code>env-alias:\n\n  MYPROJECT_ANSIBLE_VAULT_PASSWORD:\n    name: null  # prevents this value being assigned into env\n    source: '~/secure/ansible-project/vault-pass.txt'\n\n  ANSIBLE_VAULT_PASSWORD_FILE:\n    ansible_vault_password: \"env:MYPROJECT_ANSIBLE_VAULT_PASSWORD\"  # NB: see docs how this gets managed\n    ansible_vault_password_file: true  # invoke special helper that renders an Ansible Vault password file\n\n  ANSIBLE_SSH_PIPELINING:\n    value: '1'\n\n  MYPROJECT_BOOTSTRAP_SSH_KEYGEN:\n    exec: 'rm -f ~/secure/tmp/init-deployment.key; ssh-keygen -N \"\" -f ~/secure/tmp/init-deployment.key 2&gt;&amp;1'\n    name: null\n\n  MYPROJECT_BOOTSTRAP_SSH_KEYADD:\n    exec: 'ssh-add -q ~/secure/tmp/init-deployment.key 2&gt;&amp;1'\n    name: null\n</code></pre>"},{"location":"examples/aws-credentials/","title":"AWS Credentials","text":""},{"location":"examples/aws-credentials/#example","title":"Example","text":"<p>An easy example to get AWS credentials loaded in as environment variables from a non-default AWS  credentials file location.</p> <pre><code>env-alias:\n\n    AWS_ACCESS_KEY_ID:\n        source: '~/credentials/aws/account_xxx/credentials'\n        parser: 'ini'\n        selector: 'profile_name.aws_access_key_id'\n\n    AWS_SECRET_ACCESS_KEY:\n        source: '~/credentials/aws/account_xxx/credentials'\n        parser: 'ini'\n        selector: 'profile_name.aws_secret_access_key'\n\n    AWS_DEFAULT_REGION:\n        source: '~/.aws/config'\n        parser: 'ini'\n        selector: 'profile account_name.region'\n</code></pre>"},{"location":"examples/debugging/","title":"Debugging","text":""},{"location":"examples/debugging/#example","title":"Example","text":"<p>Debug output can be easily added to STDERR by adding an optional <code>--debug</code> argument to the  <code>env-alias</code> command as shown below</p> <pre><code>source &lt;(env-alias --debug ~/projects/awesome/env-awesome-vars.yml)\n</code></pre> <p>Which will provides debug output to STDERR similar as shown <pre><code>\u276f env-awesome-vars\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | EnvAliasGenerator.generate()\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | EnvAliasConfig.load_definitions(definitions_file='dev/env-foobar.yml')\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | Definitions loaded from definitions_file='dev/env-foobar.yml'\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | Loaded environment definition for 'EXAMPLE'\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | Total 1 definitions in definitions_file=PosixPath('dev/env-foobar.yml')\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | EnvAliasGenerator.get_definition_value(definition.name='EXAMPLE', ...)\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | EnvAliasContent.local(filename=/proc/cpuinfo)\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | EnvAliasContent.local(filename=/proc/cpuinfo) &gt; content_type='text'\n2024-09-21T17:34:24+1000 | DEBUG | env-alias | output=' export \"EXAMPLE\"=\"model name\\t: Intel(R) Core(TM) i5-6300U CPU @ 2.40GHz\"'\n</code></pre></p>"},{"location":"examples/terraform-aws-project/","title":"Terraform AWS project","text":""},{"location":"examples/terraform-aws-project/#example","title":"Example","text":"<p>The example below shows an Env Alias definition for setting up a Terraform environment.  Notice that  all parts of the environment are easily established by calling a single alias name and that no secret values are contained within.</p> <ul> <li>Environment variable <code>TF_VAR_aws_access_key_id</code> is set by reading the file <code>~/.aws/credentials</code>     and selecting the value from <code>account_name.aws_access_key_id</code> </li> <li>Environment variable <code>TF_VAR_aws_secret_access_key</code> is set in a similar manner.</li> <li>The path <code>~/.terraform.d/plugin-cache</code> is created and the shell exec stdout is discarded.</li> <li>Environment variable <code>TF_PLUGIN_CACHE_DIR</code> is set directly in-line to the value <code>~/.terraform.d/plugin-cache</code></li> </ul> <pre><code>env-alias:\n\n    TF_PLUGIN_CACHE_DIR_CREATE:\n        name: null\n        exec: 'mkdir -p ~/.terraform.d/plugin-cache'\n\n    TF_PLUGIN_CACHE_DIR:\n        value: '~/.terraform.d/plugin-cache'\n\n    TF_VAR_aws_access_key_id:\n        source: '~/.aws/credentials'\n        parser: 'ini'\n        selector: 'account_name.aws_access_key_id'\n\n    TF_VAR_aws_secret_access_key:\n        source: '~/.aws/credentials'\n        parser: 'ini'\n        selector: 'account_name.aws_secret_access_key'\n\n    TF_VAR_aws_default_region:\n        source: '~/.aws/config'\n        parser: 'ini'\n        selector: 'profile account_name.region'\n\n    TF_VAR_aws_ssh_key_name:\n        value: 'username'\n</code></pre>"}]}